{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAILURE, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register user \n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n  }\n}; //Login user \n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    let res = await axios.post('/api/users/login', body, config);\n    setAuthToken(res.data.token);\n    res = await axios.get('/api/auth');\n    console.log(res);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/698858/Documents/MERN/devconnector/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAILURE","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILURE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","err","type","register","name","email","password","config","headers","body","JSON","stringify","res","post","payload","data","errors","response","forEach","error","msg","login","get","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { REGISTER_SUCCESS, REGISTER_FAILURE, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE } from './types';\r\nimport { setAlert } from './alert';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n\r\n//Load User\r\nexport const loadUser = () => async dispatch => {\r\n\r\n    if (localStorage.token) {\r\n        setAuthToken(localStorage.token);\r\n\r\n    }\r\n\r\n    try {\r\n\r\n        if (localStorage.token) {\r\n            setAuthToken(localStorage.token);\r\n    \r\n        }\r\n        \r\n\r\n\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n//Register user \r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ name, email, password });\r\n    try {\r\n        const res = await axios.post('/api/users', body, config);\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        dispatch(loadUser());\r\n\r\n    }\r\n    catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: REGISTER_FAILURE\r\n        });\r\n\r\n\r\n    }\r\n}\r\n\r\n//Login user \r\nexport const login = (email, password) => async dispatch => {\r\n\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ email, password });\r\n    try {\r\n        let res = await axios.post('/api/users/login', body, config);\r\n        setAuthToken(res.data.token);\r\n\r\n        res = await axios.get('/api/auth');\r\n        console.log(res);\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n\r\n    }\r\n    catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: LOGIN_FAILURE\r\n        });\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}