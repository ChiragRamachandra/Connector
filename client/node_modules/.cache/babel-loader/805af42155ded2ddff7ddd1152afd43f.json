{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAILURE, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    console.log(\"inside localstorage\");\n    setAuthToken(localStorage.token);\n    console.log(\"done with local storage\");\n  }\n\n  try {\n    console.log(\"entering the try bloack\");\n    const res = await axios.get('/api/auth');\n    console.log(axios.request(config));\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n    console.log(\"finished the try block\");\n  } catch (err) {\n    console.log(\"inside the error block of actoins/auth.js\");\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register user \n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n  }\n}; //Login user \n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/698858/Documents/MERN/devconnector/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAILURE","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILURE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","console","log","res","get","request","config","type","payload","data","err","register","name","email","password","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { REGISTER_SUCCESS, REGISTER_FAILURE, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE } from './types';\r\nimport { setAlert } from './alert';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n\r\n//Load User\r\nexport const loadUser = () => async dispatch => {\r\n\r\n    if (localStorage.token) {\r\n        console.log(\"inside localstorage\");\r\n        setAuthToken(localStorage.token);\r\n        console.log(\"done with local storage\")\r\n    }\r\n\r\n    try {\r\n        console.log(\"entering the try bloack\");\r\n        const res = await axios.get('/api/auth');\r\n        console.log(axios.request(config)); \r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        });\r\n        console.log(\"finished the try block\");\r\n\r\n    } catch (err) {\r\n        console.log(\"inside the error block of actoins/auth.js\")\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n//Register user \r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ name, email, password });\r\n    try {\r\n        const res = await axios.post('/api/users', body, config);\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        dispatch(loadUser());\r\n\r\n    }\r\n    catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: REGISTER_FAILURE\r\n        });\r\n\r\n\r\n    }\r\n}\r\n\r\n//Login user \r\nexport const login = (email, password) => async dispatch => {\r\n\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ email, password });\r\n    try {\r\n        const res = await axios.post('/api/users/login', body, config);\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        dispatch(loadUser());\r\n\r\n    }\r\n    catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: LOGIN_FAILURE\r\n        });\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}