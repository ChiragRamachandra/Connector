{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAILURE, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT, CLEAR_PROFILE } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    if (localStorage.token) {\n      const res = await axios.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n  }\n}; //Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    let res = await axios.post('/api/users/login', body, config);\n    setAuthToken(res.data.token);\n    res = await axios.get('/api/auth');\n    console.log(res);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n  }\n}; //LOGOUT\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/698858/Documents/MERN/devconnector/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAILURE","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","CLEAR_PROFILE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","console","log","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACCC,gBADD,EAECC,gBAFD,EAGCC,WAHD,EAICC,UAJD,EAKCC,aALD,EAMCC,aAND,EAOCC,MAPD,EAQCC,aARD,QASO,SATP;AAUA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACvBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACA;;AAED,MAAI;AACH,QAAID,YAAY,CAACC,KAAjB,EAAwB;AACvB,YAAMC,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,WAAV,CAAlB;AAEAJ,MAAAA,QAAQ,CAAC;AACRK,QAAAA,IAAI,EAAEd,WADE;AAERe,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,OAAD,CAAR;AAIA;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACbR,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEb;AADE,KAAD,CAAR;AAGA;AACD,CAnBM,C,CAqBP;;AACA,OAAO,MAAMiB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAOZ,QAAP,IAAoB;AAC1E,QAAMa,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AADK,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AACA,MAAI;AACH,UAAMT,GAAG,GAAG,MAAMf,KAAK,CAAC8B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAb,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEhB,gBADE;AAERiB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACA,GAPD,CAOE,OAAOS,GAAP,EAAY;AACb,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACXA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWtB,QAAQ,CAACH,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACA;;AACDvB,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEf;AADE,KAAD,CAAR;AAGA;AACD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMkC,KAAK,GAAG,CAACb,KAAD,EAAQC,QAAR,KAAqB,MAAOZ,QAAP,IAAoB;AAC7D,QAAMa,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AADK,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AACA,MAAI;AACH,QAAIT,GAAG,GAAG,MAAMf,KAAK,CAAC8B,IAAN,CAAW,kBAAX,EAA+BH,IAA/B,EAAqCF,MAArC,CAAhB;AACAf,IAAAA,YAAY,CAACK,GAAG,CAACI,IAAJ,CAASL,KAAV,CAAZ;AAEAC,IAAAA,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,WAAV,CAAZ;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,GAAZ;AACAH,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEZ,aADE;AAERa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAVD,CAUE,OAAOC,GAAP,EAAY;AACb,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACXA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWtB,QAAQ,CAACH,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACA;;AACDvB,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEX;AADE,KAAD,CAAR;AAGA;AACD,CA1BM,C,CA4BP;;AAEA,OAAO,MAAMiC,MAAM,GAAG,MAAO3B,QAAD,IAAc;AAEtCA,EAAAA,QAAQ,CAAC;AACXK,IAAAA,IAAI,EAAEV;AADK,GAAD,CAAR;AAGH,CALM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAILURE,\r\n\tUSER_LOADED,\r\n\tAUTH_ERROR,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAILURE,\r\n\tLOGOUT,\r\n\tCLEAR_PROFILE\r\n} from './types';\r\nimport { setAlert } from './alert';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n//Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n\tif (localStorage.token) {\r\n\t\tsetAuthToken(localStorage.token);\r\n\t}\r\n\r\n\ttry {\r\n\t\tif (localStorage.token) {\r\n\t\t\tconst res = await axios.get('/api/auth');\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_LOADED,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: AUTH_ERROR\r\n\t\t});\r\n\t}\r\n};\r\n\r\n//Register user\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t}\r\n\t};\r\n\tconst body = JSON.stringify({ name, email, password });\r\n\ttry {\r\n\t\tconst res = await axios.post('/api/users', body, config);\r\n\t\tdispatch({\r\n\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\tpayload: res.data\r\n\t\t});\r\n\t\tdispatch(loadUser());\r\n\t} catch (err) {\r\n\t\tconst errors = err.response.data.errors;\r\n\t\tif (errors) {\r\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n\t\t}\r\n\t\tdispatch({\r\n\t\t\ttype: REGISTER_FAILURE\r\n\t\t});\r\n\t}\r\n};\r\n\r\n//Login user\r\nexport const login = (email, password) => async (dispatch) => {\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t}\r\n\t};\r\n\tconst body = JSON.stringify({ email, password });\r\n\ttry {\r\n\t\tlet res = await axios.post('/api/users/login', body, config);\r\n\t\tsetAuthToken(res.data.token);\r\n\r\n\t\tres = await axios.get('/api/auth');\r\n\t\tconsole.log(res);\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\tpayload: res.data\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tconst errors = err.response.data.errors;\r\n\t\tif (errors) {\r\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n\t\t}\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_FAILURE\r\n\t\t});\r\n\t}\r\n};\r\n\r\n//LOGOUT\r\n\r\nexport const logout = () => (dispatch) => {\r\n    \r\n    dispatch({\r\n\t\ttype: LOGOUT\r\n\t});\r\n};\r\n"]},"metadata":{},"sourceType":"module"}